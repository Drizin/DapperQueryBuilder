using InterpolatedSql;
using Npgsql;
using NUnit.Framework;
using System.Data;
using System.Linq;

namespace DapperQueryBuilder.Tests
{
    public class PostgreSQLTests
    {
        IDbConnection cn;

        #region Setup
        [SetUp]
        public void Setup()
        {
            cn = new NpgsqlConnection(TestHelper.GetPostgreSQLConnectionString());
        }
        [TearDown]
        public void TearDown()
        {
            // reverting back for next unit tests
            InterpolatedSql.SqlBuilders.InterpolatedSqlBuilderOptions.DefaultOptions.DatabaseParameterSymbol = "@";
            InterpolatedSql.SqlBuilders.InterpolatedSqlBuilderOptions.DefaultOptions.AutoGeneratedParameterPrefix = "p";
        }
        #endregion

        public class TitleRecord
        {
            public int Film_ID { get; set; }
            public string Title { get; set; }
            public string Description { get; set; }
            public int Release_Year { get; set; }
        }

        [Test]
        public void TestConnection()
        {
            var titles = Dapper.SqlMapper.Query<TitleRecord>(cn, "SELECT * FROM film");
            Assert.That(titles.Any());
        }

        [Test]
        public void TestParameters()
        {
            // Npgsql will rewrite SQL query and convert @p0, @p1, etc to positional placeholders ($1, $2)... https://stackoverflow.com/a/49544098/3606250 
            string search = "%Dinosaur%";
            var titles = cn.QueryBuilder($"SELECT * FROM film WHERE title like {search}").Query<TitleRecord>();
            Assert.That(titles.Any());
        }

        [Test]
        public void TestAutoGeneratedParameterPrefix()
        {
            // Npgsql does NOT require this, but it may be required in some databases/drivers which do not accept "at-parameters" (@p0, @p1, etc).
            InterpolatedSql.SqlBuilders.InterpolatedSqlBuilderOptions.DefaultOptions.DatabaseParameterSymbol = ":";
            InterpolatedSql.SqlBuilders.InterpolatedSqlBuilderOptions.DefaultOptions.AutoGeneratedParameterPrefix = "parm";

            string search = "%Dinosaur%";
            var cmd = cn.QueryBuilder($"SELECT * FROM film WHERE title like {search}");

            Assert.AreEqual("SELECT * FROM film WHERE title like :parm0", cmd.Sql);
        }


    }
}
